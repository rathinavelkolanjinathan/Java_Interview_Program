Microservice Design Pattern
-----------------------------
1.Aggregator
2.API Gateway
3.Chained or Chain of Responsibility
4.Asynchronous messaging
5.Database Design pattern
6.Event Sourcing
7.Branch Pattern
8.Command Query Responsibility Segregation(CQRS)
9.Circuit Breaker
10.Decomposition
11.Service Registry Pattern
12.Saga Pattern
13.BulkHead Pattern
14.SideCarPattern
15.API Composition Pattern
16.Event Driven Architecture pattern
17.Retry Pattern
18.Configuration Externalization pattern
19.Stranger FIG Pattern
20.Leader Election Pattern


Microservice Tools:-
-----------------------
Tools for Api Management and Testing
1.Postman
2.API Fortress

Tool forMessage:-
1.Apache kafka
2.RabbitMq


ToolsKit
1.Fabric 8
2.Sceneca

Architecture Framework
1.Goa
2.Kong
Tools for Orchestration

1.Kubernetes
2.istio

Tools for monitoring
1.Promethues
2.LogStash

ServerLess tools
1.Aws Lambda
2.Claudia

====================================
Modules
There are several modules in Spring Boot. Here is a quick overview:

spring-boot
The main library providing features that support the other parts of Spring Boot. These include:

The SpringApplication class, providing static convenience methods that can be used to write a stand-alone Spring Application. Its sole job is to create and refresh an appropriate Spring ApplicationContext.

Embedded web applications with a choice of container (Tomcat, Jetty, or Undertow).

First-class externalized configuration support.

Convenience ApplicationContext initializers, including support for sensible logging defaults.

spring-boot-autoconfigure
Spring Boot can configure large parts of typical applications based on the content of their classpath. A single @EnableAutoConfiguration annotation triggers auto-configuration of the Spring context.

Auto-configuration attempts to deduce which beans a user might need. For example, if HSQLDB is on the classpath, and the user has not configured any database connections, then they probably want an in-memory database to be defined. Auto-configuration will always back away as the user starts to define their own beans.

spring-boot-starters
Starters are a set of convenient dependency descriptors that you can include in your application. You get a one-stop shop for all the Spring and related technology you need without having to hunt through sample code and copy-paste loads of dependency descriptors. For example, if you want to get started using Spring and JPA for database access, include the spring-boot-starter-data-jpa dependency in your project, and you are good to go.

spring-boot-actuator
Actuator endpoints let you monitor and interact with your application. Spring Boot Actuator provides the infrastructure required for actuator endpoints. It contains annotation support for actuator endpoints. This module provides many endpoints, including the HealthEndpoint, EnvironmentEndpoint, BeansEndpoint, and many more.

spring-boot-actuator-autoconfigure
This provides auto-configuration for actuator endpoints based on the content of the classpath and a set of properties. For instance, if Micrometer is on the classpath, it will auto-configure the MetricsEndpoint. It contains configuration to expose endpoints over HTTP or JMX. Just like Spring Boot AutoConfigure, this will back away as the user starts to define their own beans.

spring-boot-test
This module contains core items and annotations that can be helpful when testing your application.

spring-boot-test-autoconfigure
Like other Spring Boot auto-configuration modules, spring-boot-test-autoconfigure provides auto-configuration for tests based on the classpath. It includes many annotations that can automatically configure a slice of your application that needs to be tested.

spring-boot-loader
Spring Boot Loader provides the secret sauce that allows you to build a single jar file that can be launched using java -jar. Generally, you will not need to use spring-boot-loader directly but work with the Gradle or Maven plugin instead.

spring-boot-devtools
The spring-boot-devtools module provides additional development-time features, such as automatic restarts, for a smoother application development experience. Developer tools are automatically disabled when running a fully packaged application.

Guides
The spring.io site contains several guides that show how to use Spring Boot step-by-step:

Building an Application with Spring Boot is an introductory guide that shows you how to create an application, run it, and add some management services.

Building a RESTful Web Service with Spring Boot Actuator is a guide to creating a REST web service and also shows how the server can be configured.
